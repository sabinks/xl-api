// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int            @id @default(autoincrement())
    username          String         @default("")
    displayName       String         @default("")
    email             String         @unique
    dob               String         @default("")
    phone             String         @default("")
    emailVerifiedAt   String         @default("")
    verificationToken String         @default("")
    profileImage      String         @default("")
    profileImagePath  String         @default("")
    selfSignup        Boolean        @default(false)
    data              String
    userSetting       UserSetting?
    resetPassword     ResetPassword?
    password          String
    active            Boolean        @default(false)
    posts             Post[]
    userRole          UserRole[]
    createdAt         String         @default("")
    updatedAt         String         @default("")
    customerId        String?
}

model Role {
    id       Int        @id @default(autoincrement())
    name     String     @unique
    userRole UserRole[]
}

model UserRole {
    user   User @relation(fields: [userId], references: [id])
    userId Int
    role   Role @relation(fields: [roleId], references: [id])
    roleId Int

    @@id([userId, roleId])
}

model UserSetting {
    id             Int     @id @default(autoincrement())
    notificationOn Boolean
    smsEnabled     Boolean
    userId         Int     @unique
    user           User    @relation(fields: [userId], references: [id])
}

model Post {
    id          Int     @id @default(autoincrement())
    title       String
    description String
    publish     Boolean @default(false)
    user        User    @relation(fields: [userId], references: [id])
    userId      Int
}

model BookAppointment {
    id              Int    @id @default(autoincrement())
    userId          Int
    name            String @default("")
    email           String @default("")
    phone           String @default("")
    dob             String @default("")
    bookingDateTime String @default("")
    description     String @default("")
    status          String @default("Tentative")
    createdAt       String @default("")
    updatedAt       String @default("")
}

model ClientNote {
    id        Int    @id @default(autoincrement())
    userId    Int
    name      String @default("")
    note      String @db.Text
    createdAt String @default("")
    updatedAt String @default("")
}

model Newsletter {
    id        Int    @id @default(autoincrement())
    name      String
    content   String
    createdAt String @default("")
    updatedAt String @default("")
}

model ResetPassword {
    id        Int     @id @default(autoincrement())
    userId    Int     @unique
    token     String  @default("")
    user      User    @relation(fields: [userId], references: [id])
    tokenUsed Boolean @default(false)
}
